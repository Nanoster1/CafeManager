// <auto-generated />
using System;
using CafeManager.Data.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CafeManager.Data.Migrations
{
    [DbContext(typeof(CafeManagerContext))]
    partial class CafeManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CafeManager.Core.Models.MenuItems.MenuItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_menu_items");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_menu_items_name");

                    b.ToTable("menu_items", null, t =>
                        {
                            t.HasCheckConstraint("CK_menu_items_name_MinLength", "LENGTH(name) >= 1");
                        });
                });

            modelBuilder.Entity("CafeManager.Core.Models.Orders.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("customer_name");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer")
                        .HasColumnName("payment_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_orders");

                    b.ToTable("orders", null, t =>
                        {
                            t.HasCheckConstraint("CK_orders_completed_at_MinLength", "LENGTH(completed_at) >= 1");

                            t.HasCheckConstraint("CK_orders_customer_name_MinLength", "LENGTH(customer_name) >= 1");

                            t.HasCheckConstraint("CK_orders_payment_type_Enum", "payment_type IN (0, 1)");

                            t.HasCheckConstraint("CK_orders_status_Enum", "status BETWEEN 0 AND 2");
                        });
                });

            modelBuilder.Entity("MenuItemOrder", b =>
                {
                    b.Property<long>("MenuItemsId")
                        .HasColumnType("bigint")
                        .HasColumnName("menu_items_id");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint")
                        .HasColumnName("order_id");

                    b.HasKey("MenuItemsId", "OrderId")
                        .HasName("pk_menu_item_order");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_menu_item_order_order_id");

                    b.ToTable("menu_item_order", (string)null);
                });

            modelBuilder.Entity("MenuItemOrder", b =>
                {
                    b.HasOne("CafeManager.Core.Models.MenuItems.MenuItem", null)
                        .WithMany()
                        .HasForeignKey("MenuItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_order_menu_items_menu_items_id");

                    b.HasOne("CafeManager.Core.Models.Orders.Order", null)
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_menu_item_order_orders_order_id");
                });
#pragma warning restore 612, 618
        }
    }
}
